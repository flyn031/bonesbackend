// src/controllers/quoteController.ts

import { Request, Response, NextFunction } from 'express';
import * as quoteService from '../services/quoteService';
import { QuoteStatus, Prisma } from '@prisma/client';
import prisma from '../utils/prismaClient';
import { AuthRequest } from '../types/express';

// Interface for quote service data
interface QuoteCreateData {
  customerId: string;
  title: string;
  description?: string;
  lineItems: {
    description: string;
    quantity: number;
    unitPrice: number;
    materialId: string | null;
  }[];
  validUntil?: Date;
  status?: QuoteStatus;
  customerReference?: string;
  contactEmail?: string;
  contactPerson?: string;
  contactPhone?: string;
  createdById: string;
  totalAmount?: number;
  calculatedTotal: number;
  quoteNumberPrefix?: string;
  lastQuoteNumber?: number;
}

// Controller Functions
export const getAllQuotes = async (req: AuthRequest, res: Response, next: NextFunction) => {
    try {
        const onlyLatest = req.query.all !== 'true';
        const quotes = await quoteService.getQuotes(onlyLatest);
        res.json(quotes);
    } catch (error) {
        console.error("Error in getAllQuotes:", error);
        next(error);
    }
};

export const getQuoteById = async (req: AuthRequest, res: Response, next: NextFunction) => {
    try {
        const { id } = req.params;
        const quote = await quoteService.getQuoteVersionById(id);
        if (!quote) {
            res.status(404).json({ message: 'Quote version not found' });
            return;
        }
        res.json(quote);
    } catch (error) {
        console.error(`Error in getQuoteById for ID ${req.params.id}:`, error);
        next(error);
    }
};

export const getQuoteHistoryByReference = async (req: AuthRequest, res: Response, next: NextFunction) => {
    try {
        const { quoteReference } = req.params;
        const history = await quoteService.getQuoteHistory(quoteReference);
        if (!history || history.length === 0) {
            res.status(404).json({ message: `No quote history found for reference ${quoteReference}` });
            return;
        }
        res.json(history);
    } catch (error) {
        console.error(`Error in getQuoteHistoryByReference for Ref ${req.params.quoteReference}:`, error);
        next(error);
    }
};

export const createQuote = async (req: AuthRequest, res: Response, next: NextFunction) => {
    try {
        if (!req.user?.id) {
            res.status(401).json({ message: 'User not authenticated' });
            return;
        }
        const { 
            customerId, 
            title, 
            lineItems, 
            items, 
            validUntil, 
            status, 
            customerReference, 
            contactEmail, 
            contactPerson, 
            contactPhone, 
            quoteNumberPrefix, 
            lastQuoteNumber, 
            ...otherData 
        } = req.body;
        
        const itemsToProcess = items || lineItems || [];
        if (!customerId || !title || !Array.isArray(itemsToProcess) || itemsToProcess.length === 0) {
            res.status(400).json({ message: 'Missing required fields: customerId, title, and at least one line item.' });
            return;
        }

        let calculatedTotal: number = 0;
        
        // Calculate total if not provided
        if (!otherData.calculatedTotal) {
            calculatedTotal = itemsToProcess.reduce((sum: number, item: any) => {
                const quantity = parseFloat(item.quantity?.toString() || '1') || 1;
                const unitPrice = parseFloat(item.unitPrice?.toString() || '0') || 0;
                if (!isNaN(quantity) && !isNaN(unitPrice)) {
                    return sum + (quantity * unitPrice);
                }
                return sum;
            }, 0);
        } else {
            calculatedTotal = parseFloat(otherData.calculatedTotal.toString()) || 0;
        }

        const quoteData: QuoteCreateData = {
            customerId,
            title,
            description: otherData.description,
            lineItems: itemsToProcess.map((item: any) => ({
                description: item.description || '',
                quantity: parseFloat(item.quantity?.toString() || '1') || 1,
                unitPrice: parseFloat(item.unitPrice?.toString() || '0') || 0,
                materialId: item.materialId || null
            })),
            validUntil: validUntil ? new Date(validUntil) : undefined,
            status: status as QuoteStatus || undefined,
            customerReference,
            contactEmail,
            contactPerson,
            contactPhone,
            createdById: req.user.id,
            totalAmount: otherData.totalAmount,
            calculatedTotal: calculatedTotal,
            quoteNumberPrefix,
            lastQuoteNumber
        };
        const newQuote = await quoteService.createQuoteV1(quoteData);
        res.status(201).json(newQuote);
    } catch (error) {
        console.error("Error in createQuote:", error);
        next(error);
    }
};

export const updateQuote = async (req: AuthRequest, res: Response, next: NextFunction) => {
    try {
        const { id } = req.params;
        if (!req.user?.id) {
            res.status(401).json({ message: 'User not authenticated' });
            return;
        }
        const { 
            changeReason, 
            lineItems, 
            items, 
            quoteNumberPrefix, 
            lastQuoteNumber, 
            ...updateData 
        } = req.body;
        
        const itemsToProcess = items || lineItems;

        const currentQuote = await quoteService.getQuoteVersionById(id);
        if (!currentQuote) {
            res.status(404).json({ message: `Quote version ${id} not found.` });
            return;
        }

        let calculatedTotal: number = 0;
        
        // Calculate total if necessary
        if (itemsToProcess && Array.isArray(itemsToProcess)) {
            calculatedTotal = itemsToProcess.reduce((sum: number, item: any) => {
                const quantity = parseFloat(item.quantity?.toString() || '1') || 1;
                const unitPrice = parseFloat(item.unitPrice?.toString() || '0') || 0;
                if (!isNaN(quantity) && !isNaN(unitPrice)) { 
                    return sum + (quantity * unitPrice); 
                }
                return sum;
            }, 0);
        } else if (updateData.calculatedTotal) {
            calculatedTotal = parseFloat(updateData.calculatedTotal.toString()) || 0;
        }

        // Convert itemsToProcess quantities/prices to numbers for the service layer
        const processedLineItemsForService = itemsToProcess ? itemsToProcess.map((item: any) => ({
            description: item.description || '',
            quantity: parseFloat(item.quantity?.toString() || '1') || 1,
            unitPrice: parseFloat(item.unitPrice?.toString() || '0') || 0,
            materialId: item.materialId || null
        })) : undefined;

        if (currentQuote.status === QuoteStatus.DRAFT && !changeReason) {
            const draftUpdatePayload = {
                ...updateData,
                validUntil: updateData.validUntil ? new Date(updateData.validUntil) : undefined,
                status: updateData.status as QuoteStatus || undefined,
                lineItems: processedLineItemsForService,
                totalAmount: updateData.totalAmount,
                calculatedTotal: calculatedTotal,
                quoteNumberPrefix,
                lastQuoteNumber
            };
            const updatedDraft = await quoteService.updateDraftQuote(id, draftUpdatePayload);
            res.json(updatedDraft);
        } else {
            if (!changeReason) {
                res.status(400).json({ message: 'Change reason required for new version.' });
                return;
            }
            if (!processedLineItemsForService || !Array.isArray(processedLineItemsForService) || processedLineItemsForService.length === 0) {
                res.status(400).json({ message: 'Line items are required for new version.' });
                return;
            }

            const versionData = {
                 ...updateData,
                 parentQuoteId: id,
                 changeReason: changeReason,
                 createdById: req.user.id,
                 validUntil: updateData.validUntil ? new Date(updateData.validUntil) : undefined,
                 status: updateData.status as QuoteStatus || undefined,
                 lineItems: processedLineItemsForService,
                 totalAmount: updateData.totalAmount,
                 calculatedTotal: calculatedTotal,
                 customerId: currentQuote.customerId,
                 quoteNumberPrefix,
                 lastQuoteNumber
             };
            const newVersion = await quoteService.createNewQuoteVersion(versionData);
            res.status(201).json(newVersion);
        }
    } catch (error) {
        console.error(`Error in updateQuote for ID ${req.params.id}:`, error);
        if (error instanceof Error) {
            if (error.message.includes("Cannot create") || error.message.includes("not in DRAFT")) {
                res.status(409).json({ message: error.message });
                return;
            }
            if (error.message.includes("not found")) {
                res.status(404).json({ message: error.message });
                return;
            }
        }
        next(error);
    }
};

export const deleteQuote = async (req: AuthRequest, res: Response, next: NextFunction) => {
    try {
        const { id } = req.params;
        const quoteToDelete = await prisma.quote.findUnique({ where: { id: id }, select: { status: true, isLatestVersion: true, childQuotes: { select: { id: true } } } });

        if (!quoteToDelete) {
            res.status(404).json({ message: 'Quote version not found for deletion.' });
            return;
        }

        // Example: Only allow deletion of DRAFT quotes that are the latest version and have no children
        if (quoteToDelete.status !== QuoteStatus.DRAFT || !quoteToDelete.isLatestVersion || quoteToDelete.childQuotes.length > 0) {
            res.status(403).json({ message: 'Deletion forbidden. Only the latest DRAFT version without child versions can be deleted.' });
            return;
        }

        await prisma.$transaction(async (tx: Prisma.TransactionClient) => {
            await tx.quoteLineItem.deleteMany({ where: { quoteId: id } });
            await tx.quote.delete({ where: { id: id } });
        });
        res.json({ message: `Quote version ${id} deleted successfully` });
    } catch (error) {
        console.error(`Error in deleteQuote for ID ${req.params.id}:`, error);
        if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2025') {
            res.status(404).json({ message: 'Quote version not found for deletion.' });
            return;
        }
        next(error);
    }
};

export const cloneQuoteController = async (req: AuthRequest, res: Response, next: NextFunction) => {
    try {
        const { id: sourceQuoteId } = req.params;
        const { customerId, title, quoteNumberPrefix, lastQuoteNumber } = req.body;
        if (!req.user?.id) {
            res.status(401).json({ message: 'User not authenticated' });
            return;
        }
        const clonedQuote = await quoteService.cloneQuote(
            sourceQuoteId, 
            req.user.id, 
            customerId, 
            title,
            quoteNumberPrefix,
            lastQuoteNumber
        );
        res.status(201).json(clonedQuote);
    } catch (error) {
        console.error(`Error in cloneQuoteController for ID ${req.params.id}:`, error);
        if (error instanceof Error && error.message.includes("not found")) {
            res.status(404).json({ message: error.message });
            return;
        }
        // Handle specific invalid customerId error
        if (error instanceof Error && error.message.includes("Invalid Customer ID")) {
            const errorMsg = error.message;
            const cIdMatch = errorMsg.match(/\(([^)]+)\)/);
            const invalidCustId = cIdMatch ? cIdMatch[1] : "unknown";
            res.status(400).json({ 
                message: `Failed to clone quote: Invalid Customer ID (${invalidCustId}). ${(error as any).meta?.field_name || ''}`
            });
            return;
        }
        next(error);
    }
};

export const convertQuoteToOrderController = async (req: AuthRequest, res: Response, next: NextFunction) => {
    try {
        const { id: quoteId } = req.params;
        const { quoteNumberPrefix, lastQuoteNumber } = req.body;
        if (!req.user?.id) {
            res.status(401).json({ message: 'User not authenticated' });
            return;
        }
        const result = await quoteService.convertQuoteToOrder(
            quoteId, 
            req.user.id,
            quoteNumberPrefix,
            lastQuoteNumber
        );
        res.status(201).json(result);
    } catch (error) {
        console.error(`Error in convertQuoteToOrderController for ID ${req.params.id}:`, error);
        if (error instanceof Error) {
            if (error.message.includes("not found")) {
                res.status(404).json({ message: error.message });
                return;
            }
            if (error.message.includes("APPROVED") || error.message.includes("customer") || error.message.includes("missing creator")) {
                res.status(400).json({ message: error.message });
                return;
            }
        }
        next(error);
    }
};

export const getFrequentItems = async (req: AuthRequest, res: Response, next: NextFunction) => {
    try {
        const frequentItems = await prisma.quoteTemplateItem.findMany({
            where: { isFrequentlyUsed: true },
            include: { material: true }
        });
        res.json(frequentItems);
    } catch (error) {
        console.error("Error in getFrequentItems:", error);
        next(error);
    }
};

export const updateQuoteStatus = async (req: AuthRequest, res: Response, next: NextFunction) => {
    try {
        const { id: quoteId } = req.params;
        const { status: newStatus, quoteNumberPrefix, lastQuoteNumber } = req.body;

        if (!req.user?.id) {
            res.status(401).json({ message: 'User not authenticated' });
            return;
        }
        const userId = req.user.id;

        if (!quoteId) {
            res.status(400).json({ message: "Quote ID is required in path parameters." });
            return;
        }
        if (!newStatus) {
            res.status(400).json({ message: "New status is required in the request body." });
            return;
        }
        if (!Object.values(QuoteStatus).includes(newStatus as QuoteStatus)) {
            res.status(400).json({ message: `Invalid status value provided: ${newStatus}.` });
            return;
        }

        console.log(`[QuoteController] Request to update status for quote ${quoteId} to ${newStatus} by user ${userId}`);

        const updatedQuote = await quoteService.updateQuoteStatus(
            quoteId, 
            newStatus as QuoteStatus, 
            userId,
            quoteNumberPrefix,
            lastQuoteNumber
        );

        // Fix for lineItems property access - fetch it separately
        const quoteWithLineItems = await prisma.quote.findUnique({
            where: { id: quoteId },
            include: { lineItems: true }
        });
        
        console.log(`[QuoteController] Successfully updated status for quote ${quoteId}.`);
        
        res.status(200).json({ 
            ...updatedQuote, 
            items: quoteWithLineItems?.lineItems || [],
            status: newStatus as QuoteStatus
        });
    } catch (error: any) {
        console.error(`[QuoteController] Error updating status for quote ${req.params.id}:`, error.message, error.stack);
        if (error instanceof Error) {
            if (error.message.includes("not found")) {
                res.status(404).json({ message: error.message });
                return;
            } else if (error.message.includes("Cannot change status from") || error.message.includes("Consider cloning")) {
                res.status(400).json({ message: error.message });
                return;
            }
        }
        next(error);
    }
};
