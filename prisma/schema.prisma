generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  password      String
  role          Role     @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdOrders Order[]  @relation("CreatedBy")
  managedOrders Order[]  @relation("ProjectOwner")
}

model Job {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      JobStatus @default(ACTIVE)
  customer    Customer  @relation(fields: [customerId], references: [id])
  customerId  String
  orders      Order[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Customer {
  id           String   @id @default(cuid())
  name         String
  email        String?  @unique
  phone        String?
  address      String?
  orders       Order[]
  jobs         Job[]
  importSource String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Order {
  id              String      @id @default(cuid())
  projectTitle    String
  quoteRef        String      @unique
  orderType       OrderType   @default(CUSTOMER_LINKED)
  status          OrderStatus @default(DRAFT)

  // Customer Details
  customerName    String
  contactPerson   String
  contactPhone    String
  contactEmail    String
  
  // Basic Financial Details
  projectValue    Float
  marginPercent   Float
  leadTimeWeeks   Int
  items           Json        // Array of ordered items

  // Advanced Financial Details
  costBreakdown        Json?       // Detailed cost structure
  paymentTerms        PaymentTerms @default(THIRTY_DAYS)
  customPaymentTerms  String?     // For custom payment arrangements
  currency           String      @default("GBP")
  exchangeRate       Float?      // For international orders
  vatRate            Float?      // Tax rate
  subTotal           Float      @default(0)  // Before tax
  totalTax           Float      @default(0)  // VAT/Tax amount
  totalAmount        Float      @default(0)  // Including tax
  profitMargin       Float      @default(0)  // Calculated margin
  discounts          Json?       // Any applied discounts
  paymentSchedule    Json?       // Payment milestones
  budgetAllocations  Json?       // Budget breakdown

  // Relations
  customer        Customer?   @relation(fields: [customerId], references: [id])
  customerId      String?
  job             Job?        @relation(fields: [jobId], references: [id])
  jobId           String?
  projectOwner    User        @relation("ProjectOwner", fields: [projectOwnerId], references: [id])
  projectOwnerId  String
  createdBy       User        @relation("CreatedBy", fields: [createdById], references: [id])
  createdById     String

  // Payment Milestones
  paymentMilestones PaymentMilestone[]

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model ImportLog {
  id        String       @id @default(cuid())
  filename  String
  status    ImportStatus
  records   Int
  errors    Json?
  createdAt DateTime     @default(now())
}

model RegionalTaxSetting {
  id              String   @id @default(cuid())
  country         String
  region          String?
  standardVatRate Float
  reducedVatRate  Float?
  taxCode         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model CurrencyRate {
  id           String   @id @default(cuid())
  fromCurrency String
  toCurrency   String
  rate         Float
  validFrom    DateTime
  validTo      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PaymentMilestone {
  id          String          @id @default(cuid())
  order       Order           @relation(fields: [orderId], references: [id])
  orderId     String
  description String
  amount      Float
  dueDate     DateTime
  status      MilestoneStatus @default(PENDING)
  paidDate    DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}
model Supplier {
  id          String   @id @default(cuid())
  name        String
  email       String?  @unique
  phone       String?
  address     String?
  materials   Material[]
  rating      Float?
  status      SupplierStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Material {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  description String?
  unitPrice   Float
  unit        String   // e.g., "kg", "meter", "piece"
  minStock    Int      // Minimum stock level
  currentStock Int
  supplier    Supplier @relation(fields: [supplierId], references: [id])
  supplierId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
enum Role {
  USER
  ADMIN
}

enum OrderType {
  JOB_LINKED
  CUSTOMER_LINKED
  INTERNAL
}

enum OrderStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  DECLINED
  IN_PRODUCTION
  ON_HOLD
  READY_FOR_DELIVERY
  DELIVERED
  COMPLETED
  CANCELLED
}

enum JobStatus {
  ACTIVE
  COMPLETED
  CANCELED
}

enum ImportStatus {
  SUCCESS
  PARTIAL
  FAILED
}

enum PaymentTerms {
  WITH_ORDER
  PRIOR_TO_DISPATCH
  THIRTY_DAYS
  SIXTY_DAYS
  NINETY_DAYS
  CUSTOM
}
enum SupplierStatus {
  ACTIVE
  INACTIVE
  BLACKLISTED
}
enum MilestoneStatus {
  PENDING
  OVERDUE
  PAID
  CANCELLED
}