generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MaterialCategory {
  RAW_MATERIAL
  MACHINE_PART
  CONVEYOR_COMPONENT
  OFFICE_SUPPLY
  KITCHEN_SUPPLY
  SAFETY_EQUIPMENT
  CLEANING_SUPPLY
  ELECTRICAL_COMPONENT
  MECHANICAL_COMPONENT
  OTHER
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  password      String
  role          Role     @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdOrders Order[]  @relation("CreatedBy")
  managedOrders Order[]  @relation("ProjectOwner")
}

model Job {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      JobStatus @default(ACTIVE)
  customer    Customer  @relation(fields: [customerId], references: [id])
  customerId  String
  orders      Order[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Customer {
  id           String     @id @default(cuid())
  name         String
  email        String?    @unique
  phone        String?
  address      String?
  importSource String?    // New field to track import source
  status       String?    // New field for customer status
  totalOrders  Int        @default(0) // New field for total orders
  totalSpent   Float      @default(0) // New field for total spent
  lastOrderDate DateTime? // New field for last order date
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  orders       Order[]
  materials    Material[]
  jobs         Job[] 
}
model Order {
  id              String      @id @default(cuid())
  projectTitle    String
  quoteRef        String      @unique
  orderType       OrderType   @default(CUSTOMER_LINKED)
  status          OrderStatus @default(DRAFT)
  customerName    String
  contactPerson   String
  contactPhone    String
  contactEmail    String
  projectValue    Float
  marginPercent   Float
  leadTimeWeeks   Int
  items           Json
  costBreakdown   Json?
  paymentTerms    PaymentTerms @default(THIRTY_DAYS)
  customPaymentTerms String?
  currency        String      @default("GBP")
  exchangeRate    Float?
  vatRate         Float?
  subTotal        Float       @default(0)
  totalTax        Float       @default(0)
  totalAmount     Float       @default(0)
  profitMargin    Float       @default(0)
  discounts       Json?
  paymentSchedule Json?
  budgetAllocations Json?
  notes           String?
  customer        Customer?   @relation(fields: [customerId], references: [id])
  customerId      String?
  job             Job?        @relation(fields: [jobId], references: [id])
  jobId           String?
  projectOwner    User        @relation("ProjectOwner", fields: [projectOwnerId], references: [id])
  projectOwnerId  String
  createdBy       User        @relation("CreatedBy", fields: [createdById], references: [id])
  createdById     String
  paymentMilestones PaymentMilestone[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model ImportLog {
  id        String       @id @default(cuid())
  filename  String
  status    ImportStatus
  records   Int
  errors    Json?
  createdAt DateTime     @default(now())
}

model RegionalTaxSetting {
  id              String   @id @default(cuid())
  country         String
  region          String?
  standardVatRate Float
  reducedVatRate  Float?
  taxCode         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model CurrencyRate {
  id           String   @id @default(cuid())
  fromCurrency String
  toCurrency   String
  rate         Float
  validFrom    DateTime
  validTo      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PaymentMilestone {
  id          String          @id @default(cuid())
  order       Order           @relation(fields: [orderId], references: [id])
  orderId     String
  description String
  amount      Float
  dueDate     DateTime
  status      MilestoneStatus @default(PENDING)
  paidDate    DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Supplier {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  phone         String?
  address       String?
  rating        Float?
  status        SupplierStatus @default(ACTIVE)
  totalOrders   Int       @default(0)
  completedOrders Int     @default(0)
  averageDeliveryTime Float @default(0)
  lastOrderDate DateTime?
  materials     Material[]
  performanceHistory Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Material {
  id                String           @id @default(cuid())
  code              String           @unique
  name              String
  description       String?
  category          MaterialCategory @default(OTHER)
  unitPrice         Float
  unit              String
  minStockLevel     Int              @default(0)
  currentStockLevel Int              @default(0)
  reorderPoint      Int              @default(0)
  leadTimeInDays    Int              @default(0)
  manufacturer      String?
  productSpecifications Json?
  supplier          Supplier?        @relation(fields: [supplierId], references: [id])
  supplierId        String?
  customer          Customer?        @relation(fields: [customerId], references: [id])
  customerId        String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}
enum SupplierStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  UNDER_REVIEW
  BLACKLISTED
}

enum Role {
  USER
  ADMIN
}

enum OrderType {
  JOB_LINKED
  CUSTOMER_LINKED
  INTERNAL
}

enum OrderStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  DECLINED
  IN_PRODUCTION
  ON_HOLD
  READY_FOR_DELIVERY
  DELIVERED
  COMPLETED
  CANCELLED
}

enum JobStatus {
  ACTIVE
  COMPLETED
  CANCELED
}

enum ImportStatus {
  SUCCESS
  PARTIAL
  FAILED
}

enum PaymentTerms {
  WITH_ORDER
  PRIOR_TO_DISPATCH
  THIRTY_DAYS
  SIXTY_DAYS
  NINETY_DAYS
  CUSTOM
}

enum MilestoneStatus {
  PENDING
  OVERDUE
  PAID
  CANCELLED
}